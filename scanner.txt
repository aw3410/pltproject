Def scan(input):
  Current = “”
  State = s0
  i=0
  tokenType = ‘’
  keywords = [“potion”, "prince","villain", “crown”, “tiara”, “king”, “queen”, “rose”, “castSpell”, "paint", “onceuponatime”, “happilyafterever”, "inanotherkingdom",'while","if","alive","dead"]
  punctuation = [ , | . | ( | ) | { | } | :] (Separated by | instead of comma for clarity)
  Operators = [‘+’,‘=’,‘-’, ‘*’, ‘/’, ‘==’,  ‘<=’, ‘!=’, ‘>=’, ‘>’, ‘<']
  Tokens = []
  errormessage = []
  Open = 0
  
  while (state != s_err and i<len(input))
	c = input[i]
	if (c == ‘ “ ’):
		start = i
		tokenType = “STRING”
		while (c != “ ” “ and c != ‘EOF’):
			current  += c
			state=𝛿(state, c)
			i+=1
		if (c == ‘eof’): 
			errormessage.append(“Unclosed string starting at position ”, start) 
      		else: 
        		tokens.append(“<” +tokenType+ “, ” + current + “>”/n) 
		
    	elif (c.isDigit()):
      		tokenType = “INTLITERAL”	
      		while( c != 'EOF' and c.isDigit()):
        		Current  += c
        		state=𝛿(state, c)
        		i+=1
      		if (c is not in Operators or c.isAlpha() or c == ‘ “ ’ or c == ‘ ” ’)
      			state = s_err 
      			errormessage.append(“Error at position: “ + i + “. the character is “ + c + “. intliterals can only include digits")
		tokens.append(“<” +tokenType+ “, ” + current + “>”/n) 

    	elif(c is in Operators): 
    		tokenType = “OPERATOR”
		if (i==0):
			state = s_err
    		while (c != 'EOF') 
      			current  += c
        		state=𝛿(state, c)
        		i+=1
      		tokens.append(“<” +tokenType+ “, ” + current + “>”/n)

    	elif (c is in punctuation):
		tokenType = “PUNCTUATION” 
		current  += c
      		state=𝛿(state, c)
      		if c == “(” or c== “{”:
        		open +=1
      		if c == “)” or c == “}”:
	      		open -=1
      		tokens.append(“<” +tokenType+ “, ” + current + “>”/n)
    
    	elif c.isalpha():
  		while (c.isalpha() or c.isDigit()): 
  			current  += c
        		state=𝛿(state, c)
        		i += 1
      		if (current in keywords): 
        		tokenType = “KEYWORD” 
      		elif (current not in keywords): 
	        	tokenType = “IDENTIFIER”
          	tokens.append(“<” +tokenType+ “, ” + current + “>”/n)
	else:
		errormessage.append(“Error at position: “ + i + “. “ + c + “ is an invalid character”)
		state = s_err 
			
if open != 0:
	/* report error*/
	errormessage.append(“Open bracket or parenthesis.”)
	state = s_err

if (state ∈ F): 
  /* accept */
  print(tokens);
elif:
  /* report failure */
  print(errormessage’) 
  state = s_err
